---
# tasks file for postgres

- name: Install PostgreSQL packages
  yum:
    name:
      - postgresql-server
      - postgresql-contrib
      - postgresql-devel
      - python3-psycopg2
    state: present

- name: Initialize PostgreSQL database (if not already)
  command: /usr/bin/postgresql-setup initdb
  args:
    creates: /var/lib/pgsql/data/PG_VERSION
  register: initdb_result
  changed_when: initdb_result.rc == 0

- name: Deploy pg_hba.conf (allow local postgres user via peer, apps via md5)
  template:
    src: pg_hba.conf.j2
    dest: /var/lib/pgsql/data/pg_hba.conf
    owner: postgres
    group: postgres
    mode: '0600'
  notify: Restart PostgreSQL

- name: Ensure PostgreSQL is running
  service:
    name: postgresql
    state: started
    enabled: yes

# Ensure DB user exists and has password (from vault)
- name: Ensure app DB user exists
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    state: present

# Ensure DB exists
- name: Ensure database exists
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    state: present

# Ensure devs table exists (idempotent)
- name: Ensure devs table exists
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      CREATE TABLE IF NOT EXISTS devs (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50)
      );

# Ensure unique constraint on name (safe if already present)
- name: Ensure UNIQUE constraint on devs.name
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM pg_constraint WHERE conname='devs_name_unique'
        ) THEN
          ALTER TABLE devs ADD CONSTRAINT devs_name_unique UNIQUE (name);
        END IF;
      END$$;

# Grant privileges
- name: Grant privileges to app user on DB and schema
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      GRANT CONNECT ON DATABASE {{ db_name }} TO {{ db_user }};
      GRANT USAGE ON SCHEMA public TO {{ db_user }};
      GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO {{ db_user }};
      ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO {{ db_user }};

# Seed sample data idempotently
- name: Seed devs table with sample data
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    query: |
      INSERT INTO devs (name)
      VALUES
        ('Flask Developer'),
        ('Node Developer'),
        ('Shared DB User')
      ON CONFLICT (name) DO NOTHING;
